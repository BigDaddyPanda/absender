// <auto-generated />
using AbsenderAPI.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;

namespace AbsenderAPI.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20181125235444_add seance time")]
    partial class addseancetime
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.3-rtm-10026")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("AbsenderAPI.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<int?>("GroupeIdGroupe");

                    b.Property<int>("IdContact");

                    b.Property<string>("IdNational");

                    b.Property<string>("IdUniversitaire");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("PhotoProfil");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("GroupeIdGroupe");

                    b.HasIndex("IdContact")
                        .IsUnique();

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("AbsenderAPI.Models.UniversityModels.Absence", b =>
                {
                    b.Property<int>("IdAbsence")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("DateAbsence");

                    b.Property<string>("IdEtudiant");

                    b.Property<int>("IdSeance");

                    b.Property<string>("JustificatifAbsence");

                    b.HasKey("IdAbsence");

                    b.HasIndex("IdEtudiant");

                    b.HasIndex("IdSeance");

                    b.ToTable("Absence");
                });

            modelBuilder.Entity("AbsenderAPI.Models.UniversityModels.Contact", b =>
                {
                    b.Property<int>("IdContact")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Designation");

                    b.Property<string>("IdUser");

                    b.Property<string>("Valeur");

                    b.HasKey("IdContact");

                    b.HasIndex("IdUser");

                    b.ToTable("Contact");
                });

            modelBuilder.Entity("AbsenderAPI.Models.UniversityModels.Groupe", b =>
                {
                    b.Property<int>("IdGroupe")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Designation");

                    b.Property<bool>("EstCoursJour");

                    b.Property<int>("IdOption");

                    b.HasKey("IdGroupe");

                    b.HasIndex("IdOption");

                    b.ToTable("Groupe");
                });

            modelBuilder.Entity("AbsenderAPI.Models.UniversityModels.Matiere", b =>
                {
                    b.Property<int>("IdMatiere")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Coefficient");

                    b.Property<string>("DesignationMatiere");

                    b.Property<int>("IdPanier");

                    b.Property<string>("TagMatiere");

                    b.Property<decimal>("TauxTolere");

                    b.Property<decimal>("VolumeHoraire");

                    b.HasKey("IdMatiere");

                    b.HasIndex("IdPanier");

                    b.ToTable("Matiere");
                });

            modelBuilder.Entity("AbsenderAPI.Models.UniversityModels.Niveau", b =>
                {
                    b.Property<int>("IdNiveau")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("DesignationNiveau");

                    b.Property<string>("TagNiveau");

                    b.HasKey("IdNiveau");

                    b.ToTable("Niveau");
                });

            modelBuilder.Entity("AbsenderAPI.Models.UniversityModels.Option", b =>
                {
                    b.Property<int>("IdOption")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("DesignationOption");

                    b.Property<int>("IdNiveau");

                    b.Property<string>("TagOption");

                    b.HasKey("IdOption");

                    b.HasIndex("IdNiveau");

                    b.ToTable("Option");
                });

            modelBuilder.Entity("AbsenderAPI.Models.UniversityModels.Panier", b =>
                {
                    b.Property<int>("IdPanier")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("DesignationPanier");

                    b.Property<string>("TagPanier");

                    b.HasKey("IdPanier");

                    b.ToTable("Panier");
                });

            modelBuilder.Entity("AbsenderAPI.Models.UniversityModels.Seance", b =>
                {
                    b.Property<int>("IdSeance")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("IdEnseignant");

                    b.Property<int>("IdGroupe");

                    b.Property<int>("IdMatiere");

                    b.Property<string>("TempsDebut");

                    b.Property<string>("TempssFin");

                    b.HasKey("IdSeance");

                    b.HasIndex("IdEnseignant");

                    b.HasIndex("IdGroupe");

                    b.HasIndex("IdMatiere");

                    b.HasIndex("TempsDebut");

                    b.HasIndex("TempssFin");

                    b.ToTable("Seance");
                });

            modelBuilder.Entity("AbsenderAPI.Models.UniversityModels.TempsSeance", b =>
                {
                    b.Property<string>("RepresentationHHMM")
                        .ValueGeneratedOnAdd();

                    b.HasKey("RepresentationHHMM");

                    b.ToTable("TempsSeance");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("AbsenderAPI.Models.ApplicationUser", b =>
                {
                    b.HasOne("AbsenderAPI.Models.UniversityModels.Groupe")
                        .WithMany("Etudiants")
                        .HasForeignKey("GroupeIdGroupe");

                    b.HasOne("AbsenderAPI.Models.UniversityModels.Contact", "ContactUtilisateur")
                        .WithOne()
                        .HasForeignKey("AbsenderAPI.Models.ApplicationUser", "IdContact")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("AbsenderAPI.Models.UniversityModels.Absence", b =>
                {
                    b.HasOne("AbsenderAPI.Models.ApplicationUser", "Etudiant")
                        .WithMany()
                        .HasForeignKey("IdEtudiant");

                    b.HasOne("AbsenderAPI.Models.UniversityModels.Seance", "Seance")
                        .WithMany("Absences")
                        .HasForeignKey("IdSeance")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("AbsenderAPI.Models.UniversityModels.Contact", b =>
                {
                    b.HasOne("AbsenderAPI.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("IdUser");
                });

            modelBuilder.Entity("AbsenderAPI.Models.UniversityModels.Groupe", b =>
                {
                    b.HasOne("AbsenderAPI.Models.UniversityModels.Option", "Option")
                        .WithMany("Groupes")
                        .HasForeignKey("IdOption")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("AbsenderAPI.Models.UniversityModels.Matiere", b =>
                {
                    b.HasOne("AbsenderAPI.Models.UniversityModels.Panier", "Panier")
                        .WithMany("Matieres")
                        .HasForeignKey("IdPanier")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("AbsenderAPI.Models.UniversityModels.Option", b =>
                {
                    b.HasOne("AbsenderAPI.Models.UniversityModels.Niveau", "Niveau")
                        .WithMany("Niveauoptions")
                        .HasForeignKey("IdNiveau")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("AbsenderAPI.Models.UniversityModels.Seance", b =>
                {
                    b.HasOne("AbsenderAPI.Models.ApplicationUser", "Enseignant")
                        .WithMany()
                        .HasForeignKey("IdEnseignant");

                    b.HasOne("AbsenderAPI.Models.UniversityModels.Groupe", "Groupe")
                        .WithMany("Seances")
                        .HasForeignKey("IdGroupe")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AbsenderAPI.Models.UniversityModels.Matiere", "Matiere")
                        .WithMany("Seances")
                        .HasForeignKey("IdMatiere")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AbsenderAPI.Models.UniversityModels.TempsSeance", "Debut")
                        .WithMany()
                        .HasForeignKey("TempsDebut");

                    b.HasOne("AbsenderAPI.Models.UniversityModels.TempsSeance", "Fin")
                        .WithMany()
                        .HasForeignKey("TempssFin");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("AbsenderAPI.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("AbsenderAPI.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AbsenderAPI.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("AbsenderAPI.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
